<?xml version="1.0"?>
<robot name="bigrdigr" xmlns:xacro="https://www.ros.org/wiki/xacro">
<xacro:property name="imu_visual" value="true"/>
<xacro:property name="pseye_FOV" value="1.309"/> <!--56 or 75 degrees, need rad-->

<!-- ToDo
Pseye camera sensors
imu sensor values
real sense sensors
decawave sensors (1001) (talks between robot and base station for speed)
wheel odometry (encoders, handleed in ros)
explore other plugins
-->
	<!-- <gazebo>
		<plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
			<robotNamespace>/bigrdigr</robotNamespace>
		</plugin>
	</gazebo> -->

	<gazebo reference="world_origin">
		<turnGravityOff>false</turnGravityOff>
	</gazebo>

	<gazebo reference="base_link">
		<material>Gazebo/Grey</material>
		<turnGravityOff>false</turnGravityOff>
	</gazebo>

	<gazebo reference="arm_link">
		<material>Gazebo/Orange</material>
		<mu1>0.3</mu1>
		<mu2>0.3</mu2>
	</gazebo>

	<gazebo reference="digr_link">
		<material>Gazebo/Purple</material>
		<mu1>0.3</mu1>
		<mu2>0.3</mu2>
		<kp>1000000.0</kp>
		<kd>1.0</kd>
		<minDepth>0.001</minDepth>
		<maxVel>1</maxVel>
		<fdir1>1 0 0</fdir1>
	</gazebo>

	<gazebo reference="front_left_wheel">
		<mu1>0.3</mu1>
		<mu2>0.3</mu2>
		<kp>1000000.0</kp>
		<kd>1.0</kd>
		<minDepth>0.001</minDepth>
		<maxVel>1</maxVel>
		<fdir1>1 0 0</fdir1>
		<material>Gazebo/FlatBlack</material>
	</gazebo>

	<gazebo reference="front_right_wheel">
		<mu1>0.3</mu1>
		<mu2>0.3</mu2>
		<kp>1000000.0</kp>
		<kd>1.0</kd>
		<minDepth>0.001</minDepth>
		<maxVel>1</maxVel>
		<fdir1>1 0 0</fdir1>
		<material>Gazebo/FlatBlack</material>
	</gazebo>

	<gazebo reference="back_left_wheel">
		<mu1>0.3</mu1>
		<mu2>0.3</mu2>
		<kp>1000000.0</kp>
		<kd>1.0</kd>
		<minDepth>0.001</minDepth>
		<maxVel>1</maxVel>
		<fdir1>1 0 0</fdir1>
		<material>Gazebo/FlatBlack</material>
	</gazebo>

	<gazebo reference="back_right_wheel">
		<mu1>0.3</mu1>
		<mu2>0.3</mu2>
		<kp>1000000.0</kp>
		<kd>1.0</kd>
		<minDepth>0.001</minDepth>
		<maxVel>1</maxVel>
		<fdir1>1 0 0</fdir1>
		<material>Gazebo/FlatBlack</material>
	</gazebo>

	<gazebo reference="pseye_camera1">
		<material>Gazebo/Red</material>
		<sensor type="camera" name="cam1">
			<update_rate>120</update_rate> <!--fps? -->
			<camera name="front_left">
				<horizontal_fov>${pseye_FOV}</horizontal_fov>
				<image>
					<width>320</width>
					<height>240</height>
					<format>R8G8B8</format>
				</image>
				<clip> <!--distance (m) limits on where a camera can see an object need to find -->
					<near>0.02</near>
					<far>300</far>
				</clip>
				<noise>
					<type>gaussian</type>
					<mean>0.0</mean>
					<stddev>0.007</stddev>
				</noise>
			</camera>
			<plugin name="camera_controller" filename="libgazebo_ros_camera.so">
				<alwaysOn>true</alwaysOn>
				<!--Nodes-->
				<updateRate>0.0</updateRate>
				<cameraName>camera/pseye_camera1</cameraName>
				<imageTopicName>image_raw</imageTopicName>
				<cameraInfoTopicName>camera_info</cameraInfoTopicName>
				<frameName>pseye_camera1</frameName>
				<!--May need to find? -->
				<hackBaseline>0.07</hackBaseline>
				<distortionK1>0.0</distortionK1>
				<distortionK2>0.0</distortionK2>
				<distortionK3>0.0</distortionK3>
				<distortionT1>0.0</distortionT1>
				<distortionT2>0.0</distortionT2>
			</plugin>
		</sensor>
	</gazebo>

	<gazebo reference="pseye_camera2">
		<material>Gazebo/Red</material>
		<sensor type="camera" name="cam2">
			<update_rate>120</update_rate> <!--fps? -->
			<camera name="front_left">
				<horizontal_fov>${pseye_FOV}</horizontal_fov>
				<image>
					<width>320</width>
					<height>240</height>
					<format>R8G8B8</format>
				</image>
				<clip> <!--distance (m) limits on where a camera can see an object need to find -->
					<near>0.02</near>
					<far>300</far>
				</clip>
				<noise>
					<type>gaussian</type>
					<mean>0.0</mean>
					<stddev>0.007</stddev>
				</noise>
			</camera>
			<plugin name="camera_controller" filename="libgazebo_ros_camera.so">
				<alwaysOn>true</alwaysOn>
				<!--Nodes-->
				<updateRate>0.0</updateRate>
				<cameraName>camera/pseye_camera2</cameraName>
				<imageTopicName>image_raw</imageTopicName>
				<cameraInfoTopicName>camera_info</cameraInfoTopicName>
				<frameName>pseye_camera2</frameName>
				<!--May need to find? -->
				<hackBaseline>0.07</hackBaseline>
				<distortionK1>0.0</distortionK1>
				<distortionK2>0.0</distortionK2>
				<distortionK3>0.0</distortionK3>
				<distortionT1>0.0</distortionT1>
				<distortionT2>0.0</distortionT2>
			</plugin>
		</sensor>
	</gazebo>

	<gazebo reference="pseye_camera3">
		<material>Gazebo/Red</material>
		<sensor type="camera" name="cam1">
			<update_rate>120</update_rate> <!--fps? -->
			<camera name="front_left">
				<horizontal_fov>${pseye_FOV}</horizontal_fov>
				<image>
					<width>320</width>
					<height>240</height>
					<format>R8G8B8</format>
				</image>
				<clip> <!--distance (m) limits on where a camera can see an object need to find -->
					<near>0.02</near>
					<far>300</far>
				</clip>
				<noise>
					<type>gaussian</type>
					<mean>0.0</mean>
					<stddev>0.007</stddev>
				</noise>
			</camera>
			<plugin name="camera_controller" filename="libgazebo_ros_camera.so">
				<alwaysOn>true</alwaysOn>
				<!--Nodes-->
				<updateRate>0.0</updateRate>
				<cameraName>camera/pseye_camera3</cameraName>
				<imageTopicName>image_raw</imageTopicName>
				<cameraInfoTopicName>camera_info</cameraInfoTopicName>
				<frameName>pseye_camera3</frameName>
				<!--May need to find? -->
				<hackBaseline>0.07</hackBaseline>
				<distortionK1>0.0</distortionK1>
				<distortionK2>0.0</distortionK2>
				<distortionK3>0.0</distortionK3>
				<distortionT1>0.0</distortionT1>
				<distortionT2>0.0</distortionT2>
			</plugin>
		</sensor>
	</gazebo>

	<gazebo reference="pseye_camera4">
		<material>Gazebo/Red</material>
		<sensor type="camera" name="cam4">
			<update_rate>120</update_rate> <!--fps? -->
			<camera name="front_left">
				<horizontal_fov>${pseye_FOV}</horizontal_fov>
				<image>
					<width>320</width>
					<height>240</height>
					<format>R8G8B8</format>
				</image>
				<clip> <!--distance (m) limits on where a camera can see an object need to find -->
					<near>0.02</near>
					<far>300</far>
				</clip>
				<noise>
					<type>gaussian</type>
					<mean>0.0</mean>
					<stddev>0.007</stddev>
				</noise>
			</camera>
			<plugin name="camera_controller" filename="libgazebo_ros_camera.so">
				<alwaysOn>true</alwaysOn>
				<!--Nodes-->
				<updateRate>0.0</updateRate>
				<cameraName>camera/pseye_camera4</cameraName>
				<imageTopicName>image_raw</imageTopicName>
				<cameraInfoTopicName>camera_info</cameraInfoTopicName>
				<frameName>pseye_camera4</frameName>
				<!--May need to find? -->
				<hackBaseline>0.07</hackBaseline>
				<distortionK1>0.0</distortionK1>
				<distortionK2>0.0</distortionK2>
				<distortionK3>0.0</distortionK3>
				<distortionT1>0.0</distortionT1>
				<distortionT2>0.0</distortionT2>
			</plugin>
		</sensor>
	</gazebo>

	<gazebo reference="imu_link">
		<gravity>true</gravity>
		<sensor type="imu" name="imu">
			<always_on>true</always_on>
			<update_rate>100</update_rate>
			<visualize>${imu_visual}</visualize>
			<topic>imu_data</topic>
			<plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
				<topicName>imu/data</topicName>
				<bodyName>imu_link</bodyName>
				<updateRateHZ>10.0</updateRateHZ>
				<gaussianNoise>0.0</gaussianNoise>
				<xyzOffset>0 0 0</xyzOffset>
				<rpyOffset>0 0 0</rpyOffset>
				<frameName>imu_link</frameName>
			</plugin>
			<pose>0 0 0 0 0 0</pose>
		</sensor>
		<material>Gazebo/Blue</material>
	</gazebo>

	<!-- <gazebo>
	  <plugin name="differential_drive_controller1" filename="libgazebo_ros_diff_drive.so">
	    <alwaysOn>true</alwaysOn>
	    <updateRate>100</updateRate>
	    <leftJoint>front_left_wheel_joint</leftJoint>
	    <rightJoint>front_right_wheel_joint</rightJoint>
	    <wheelSeparation>0.5825</wheelSeparation>
	    <wheelDiameter>0.348</wheelDiameter>
	    <torque>20</torque>
	    <commandTopic>cmd_vel</commandTopic>
	    <odometryTopic>odom</odometryTopic>
	    <odometryFrame>odom</odometryFrame>
	    <robotBaseFrame>world_origin</robotBaseFrame>
			<legacyMode>false</legacyMode>
	  </plugin>
	</gazebo>

	<gazebo>
	  <plugin name="differential_drive_controller2" filename="libgazebo_ros_diff_drive.so">
	    <alwaysOn>true</alwaysOn>
	    <updateRate>100</updateRate>
	    <leftJoint>back_left_wheel_joint</leftJoint>
	    <rightJoint>back_right_wheel_joint</rightJoint>
	    <wheelSeparation>0.5825</wheelSeparation>
	    <wheelDiameter>0.348</wheelDiameter>
	    <torque>20</torque>
	    <commandTopic>cmd_vel</commandTopic>
	    <odometryTopic>odom</odometryTopic>
	    <odometryFrame>odom</odometryFrame>
	    <robotBaseFrame>world_origin</robotBaseFrame>
			<legacyMode>false</legacyMode>
	  </plugin>
	</gazebo> -->

	<gazebo>
	  <plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
	    <updateRate>100.0</updateRate>
	    <robotNamespace>/bigrdigr</robotNamespace>
			<commandTopic>cmd_vel</commandTopic>
			<odometryTopic>odometry/wheel</odometryTopic>
	    <leftFrontJoint>front_left_wheel_joint</leftFrontJoint>
	    <rightFrontJoint>front_right_wheel_joint</rightFrontJoint>
	    <leftRearJoint>back_left_wheel_joint</leftRearJoint>
	    <rightRearJoint>back_right_wheel_joint</rightRearJoint>
	    <wheelSeparation>0.5825</wheelSeparation>
	    <wheelDiameter>0.348</wheelDiameter>
	    <robotBaseFrame>base_link</robotBaseFrame>
	    <torque>20</torque>
	    <broadcastTF>true</broadcastTF>
			<legacyMode>false</legacyMode>
	  </plugin>
	</gazebo>

</robot>
