2018 April 18: Jude
Making a formatter interface. It's not as bad as I thought it would be, but the sketchy undef use case is the problem. There is this type val_fmt. For motors:
val_fmt motor_fmt = {"Motor",'!',3,0,200,100,100};
Formatter<float> motor_msg = Formatter(motor_fmt,4);
val_fmt coord_fmt = {"Coord",'@',5,0,99999,49999,100};
Formatter<double> coord_msg = Formatter(coord_fmt,4*3);
// Most likely have diff format for many things (points) and strings, this is just for normal sensor vals;
Messenger ardi = Messenger(2,[motor_msg,coord_msg]);
std::string out = ardi.???
// OR
val_fmt's motor_fmt, coord_fmt; // const
vector(int,double) typecoord; // to send
vector(int,int) typemotor; // generated this round
string out = ""; // new each round
Formatter<double> coord_msg = Formatter(coord_fmt); // const?
Formatter<float> motor_msg = Formatter(motor_fmt);
// Basically, iter through all vectors of gen'd stats, apply conversion, combine to string;
// Second verse, iter through string, get symbol, id, val; match with right val_fmt/Formatter, conv into right type for id, apply for id. All Formatters must be bundled together. 
FormatAbstract must then have a ;;;

Change: 
// Consts
val_fmts: motor_fmt, coord_fmt
std::unique_ptr<Formatter<float>> motor_msg(new Formatter<float>(motor_fmt));
std::unique_ptr<Formatter<double>> coord_msg(new Formatter<double>(coord_fmt)); 
vector<vector<

Try3: 
Need val_fmts; 
Have Messenger class, could get complicated, later;
Have Formatter take in a val_fmt and a pair of vectors, inds and values; that function can be a template;


I think I got it. I'm gonna parameterize the function, have formatter be a class parameterized by the kinds of messages that can get passed to it. 
No messenger class? Might do something with Telecomm/Formatter, idk. 

2018 April 22: Jude
Several changes. Made a version of the class with just ints & floats - better. Making that Formatter.h/cpp, the other one is renamed Formatter_T.h/cpp. I think this does what we need, just need to define standards. 
Made the more pure c++ code have .hpp/.cpp extensions, then made a c/c++ class with .hh/.cc extensions. It's almost c code, which should give it good compatibility with arduino. 
Compiled the teleop codes successfully. Started arduino program as well. 
The arduino program won't compile, but it's generally in the write shape, debugging moreso. 

2018 April 23: Jude
Formatter.hh/cc definitely wasn't ready to run. Spent too much time getting it to compile. I hopefully learned something about C/C++98. 
Now working, with testC.cc

2018 April 24: Jude
Problem: if(!ptr) // implies pointer is null, was missing in nextIV. Also, needed to pass list pointer by value in parse. Also, initial root of list is null, fixed all 3. Updated arduino as well

